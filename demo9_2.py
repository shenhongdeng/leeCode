'''
数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。

输入：n = 3
输出：["((()))","(()())","(())()","()(())","()()()"]
'''

class Solution:
    def generateParenthesis(self, n: int):
        self.result = set()
        return self.creatResult(n)


    def creatResult(self, n):
        if n == 1:
            return ["()"]
        else:
            temp = set()
            for i in self.creatResult(n - 1):
                temp.add("("+i+")")
                temp.add("()" + i)
                temp.add(i + "()")
            if n >= 3:
                for j in self.creatResult(n - 2):
                    temp.add(j+"(())")
                    temp.add("(())" + j)
            return list(temp)

# print(len(set(["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()","(())(())","(())()()","()((()))","()(()())","()(())()","()()(())","()()()()"])))
# print(len(["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()","(())(())","(())()()","()((()))","()(()())","()(())()","()()(())","()()()()"]))
S = Solution()
# a = ['()()()()', '(()()())', '()(())()', '(()(()))', '((()))()', '()(()())', '((())())', '(((())))', '()()(())', '(()())()', '((()()))', '()((()))', '(())()()']
# b = ["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()","(())(())","(())()()","()((()))","()(()())","()(())()","()()(())","()()()()"]
# print([x for x in b if x not in a])
print(len(S.generateParenthesis(4)))





